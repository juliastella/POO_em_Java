Traballhando com class e instância de objetos:

O arquivo App.java vai ser o principal. Eles vai ser responsalve
por inicializar a nossa aplicação.

Metodos acessores:
 
 Public: qualquer pessoa pode acessar.
    
    public String nome;

 Private: somente a Class pode acessar

    private String nome;

 Protect: que a Class e seus filhos conseguem acessar.
   
    protected Integer idade;

 Default: a propria class, seu filhos e as class no mesmo package, podem acessar.

    String nome;
      ou 
    Default Integer idade;

Como criar um objeto?
  
  Foi feita a Class pessoa(que é um arquivo), é preciso chamar essa Class no 
  arquivo App.java. Para instancia uma Class é precisso colocar a palavra new.
   
   Desta forma:   

   Pessoa pessoa1 = new Pessoa();

Evoluindo Class:

  Getters e Setters:
     
     Set: recebe o valor do atributo, que será possivel manipular.
     Get: Deixar visivel os dados.
    
     Void = significa que nã retornar nada.

    Dica!

       Para gerar Getters and Setters automaticamente, basta clicar dentro da Class
       com o botão esquerdo e escolhe a opição Source action -> Generete Getters and Setters.

    Regras:

      Formas de escrever: 

        (Nome de arquivo, Class e cosntrutos) PascalCase: Primeira letra em maiusculo.
        (Objetos, atributos, metodos, variave e Getters e Setters) Camelcase: Pimeira letra é minuscula da primeira palavra e na segunda
        palavra é maiusculo.
        Exemplo Camelcase: nomeCompleto.


Trabalhando com tipos de dados:

        byte tipoByte = 127;
        Short tipoShort = 32767;
        Integer tipoInteger = 2147483647;
        Long tipLong = 9223372036854775807L;
        Float tipoFloat = Float.MAX_VALUE;
        Double tipoDouble = Double.MAX_VALUE;

        String tipoString = "Teste texto";
        char tipoChar = 'S';
        Boolean tipBoolean = false;

Implementando métodos:

   Estrutura de páginas:

    Src = Vem de Source, tudo vai está dentro dela.
      interfaces
      model = vai está nossos modelos, Class
      utils


   Metodos: são recursos dentro de uma Class ou objeto que gerão comportamentos.
   Constante: é algo que nunca mudar.

Conhecendo heranças:

    Usa-se o camando extends para informar que aquela Class é herdeira.
   
    Exemplo:
    
      public class ContaCorrente extends ContaBancaria{

   O metodo super serve para passar os valores para o a Class pai.

Trabalhando com classe Static e Abstract:
  
   Class Abstract: a class vai ser travada ou seja não pode ser instanciada, e serve para ser usada de modelo por outras.

    Exemplo:

    public  abstract class ContaBancaria {}

   Java.utils = é um pacote padrão do Java.

   Class Static: não obriga a instanciar o objeto, podendo usar.
   Servem para fazer converções e não armazenam valores em propriedades.

   Exemplo no metodo:

    public static String converterDateParaHora(Date data) {}

   O arquivo utils: são classes que podem ser usadas em qualquer lugar. É comum que essas classe sejam static.

Polimorfismo, Override e Encapsulamento:

   o metodo toString(): vem em todo objeto, como também ele vem do primeiro objeto do Java.
   Ele tenta pegar o objeto e transforma em String. 

   Override: é sobre escrita de código. Faz com que o metodo antigo não vale mas nada.
   Em miudos, pegar um metodo que já existe ou padrão e reescrever o mesmo. 

Trabalhando com Collections:

    ArrayList = objeto generico, pode guarda qualquer coisa.

    Exemplo:

      private ArrayList<Movimentacao> movitacoes;

   O metodo add() = vai adicionar ao no array.

   Um metodo pode ser Abstract, contudo não vai poder ter implementação.

   Exemplo: 

    Com implementação: 
     
      public void transferir(){} // As chaves são a implementação.

    Sem implementação e com abstract:
      
       public abstract void imprimirExtrato(); 

Conhecendo as interfaces:

   O que é o interfaces: são contratos que podem se implementados nas classes
   para gera comportamentos especificos. Ou seja o contrato é o que dita as regras do que vai acontecer.

   Exemplo: 

   public class Camareira extends pessoa implements ComportamentoCamarira{}

     Adiciona a palavra implements mais o arquivo de implementação.

   Uma implementação pode ser usada em outras classes. Ou seja o comportamento é replicado para outras classes.
   
   Exemplo: 
    
     public class Gerente extends Pessoa implements ComportamentoCamarira, ComportamentoRecepicionista{}


   Diferença de class abstract e interfaces:
    
     Class abstract pode ter atributos e implementações, já são simplesmente contratos ou metodos.

Conhecendo os Enums:

   O que é um Enum: é uma estrutura, e enumerador.

    Exemplo: 

    public enum EnumTipo {}

    Sobre a estrutura:
      
      Sintaxe de construção:
        
        BASICO("Basico"), MASTER("Master") = em maiusculo s são a constante e minusculo e entre parenteses, o valor da constante.





